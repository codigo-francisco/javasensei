{
  "name": "node-tree-data",
  "version": "0.0.2",
  "description": "tree data structure",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "node-uuid": "*"
  },
  "development": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/brighthas/tree-data.git"
  },
  "keywords": [
    "tree",
    "data",
    "structure"
  ],
  "author": {
    "name": "brighthas",
    "email": "brighthas@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "ed25294d8f5f8c9c2f2f75d96bd2abe49a5de06b",
  "readme": "tree-data\r\n=========\r\n\r\ntree data structure for javascript.\r\n\r\ninstall for node\r\n================\r\n\r\n     npm install node-tree-data\r\n\r\ninstall for component\r\n=====================\r\n\r\n     component install brighthas/tree-data\r\n\r\n## API\r\n\r\n### new Tree(id)\r\n\r\n```javascript\r\nvar tree = new Tree();  // if no id , auto create a id.\r\nvar two_tree = new Tree(\"id-002\");\r\n```\r\n### tree.json / tree.reborn(json) / Tree.json2obj(json)\r\n```javascript\r\nvar treeData = tree.json();\r\n\r\ntreeData.id\r\ntreeData.rootIds // top node's id, Array.\r\ntreeData.nodes   // all nodes , look [about node object]\r\n\r\nvar tree2 = new Tree();\r\ntree2.reborm(treeData);  // clone tree1 data to -> tree2\r\n\r\nvar tree3 = Tree.json2obj(treeData); // json data to tree obj.\r\n\r\n```\r\n### tree.createNode(label,parentId)\r\n\r\n```javascript\r\nvar root1 = tree.createNode(\"Index 1\"); // create root node .\r\nvar root2 = tree.createNode(\"Index 2\");\r\nvar node1 = tree.createNode(\"Child 1\",root2.id); // create child node for root2.\r\nvar node2 = tree.createNode(\"Child 2\",root2.id);\r\n```\r\n### tree.getNode(nodeId)\r\n\r\n```javascript\r\nvar node = tree.getNode(node2.id);\r\n```\r\n### about node object\r\n```javascript\r\nvar node = tree.getNode(nodeId);\r\nnode.parent  // is parent node's id.\r\nnode.id\r\nnode.list  // is child's ids , Array.\r\nnode.label // label name , see tree.createNode(label).\r\n\r\n```\r\n\r\n### tree.getChildIds(parentId)\r\n\r\n```javascript\r\nvar root_ids = tree.getChildIds();  // null argumets , get root node ids.\r\nvar childs_ids = tree.getChildIds(root2.id) // get root2's child node ids.\r\n```\r\n\r\n### tree.getChilds(parentId)\r\n\r\n```javascript\r\nvar roots = tree.getChilds();  // null argumets , get root nodes.\r\nvar childs = tree.getChilds(root2.id) // get root2's child nodes.\r\n```\r\n\r\n### tree.move(target,nodeId)\r\n\r\n    move nodeId's node to targetId's node.\r\n\r\n```javascript\r\ntree.move(root1.id,node2.id); // move node2 to root1.\r\n```\r\n\r\n### tree.remove(nodeId)\r\n```javascript\r\ntree.remove(node2.id) // remove node2 from tree.\r\n```\r\n\r\n### tree.isSameRoot(nodeId1,nodeId2)\r\n\r\n### tree.isRoot(nodeId)\r\n\r\n### tree.getJoinId(nodeId1,nodeId2)\r\n\r\n### tree.id\r\n\r\n### tree.up(nodeId)\r\n\r\n    move up a node.\r\n\r\n### tree.down(nodeId)\r\n\r\n    move down a node.\r\n\r\n### tree.top(nodeId)\r\n\r\n    top a node.\r\n\r\n### tree.changeNodeLabel(label,nodeId)\r\n\r\n    change node's label.\r\n\r\n### tree.setNodeData(data,nodeId)\r\n\r\n```javascript\r\nvar tree = new Tree();\r\nvar node = tree.createNode(\"index page\");\r\nconsole.log(node.data) // {}\r\nnode.data = {htmlclass:\".root\"}  // error! because this node onlyread.\r\ntree.setNodeData({htmlclass:\".root\"},node.id);  // ok!\r\n```\r\n\r\n## Event\r\n\r\n### 'create' event.\r\n```javascript\r\nvar tree = new Tree();\r\ntree.on(\"create\",function(newID){\r\n    console.log(\"create a new node.\");\r\n})\r\ntree.createNode(\"about page\");\r\n// print 'create a new node.'\r\n```\r\n\r\n### 'change' event.\r\n```javascript\r\nvar tree = new Tree();\r\nvar node = tree.createNode(\"my page\");\r\ntree.on('change',function(id){\r\n   console.log(\"a node changed\");\r\n})\r\ntree.setNodeData({author:\"leo\"},node.id);\r\n// print 'a node changed'\r\n```\r\n### 'remove' event.\r\n```javascript\r\nvar tree = new Tree();\r\nvar node = tree.createNode(\"my page\");\r\ntree.on('remove',function(id){\r\n   console.log(\"a node removed\");\r\n})\r\ntree.remove(node.id);\r\n// print 'a node removed'\r\n```\r\n\r\n\r\n",
  "_id": "node-tree-data@0.0.2",
  "dist": {
    "shasum": "d8daa89a61bb90528d3b55cfbfb6f13f966b3513",
    "tarball": "http://registry.npmjs.org/node-tree-data/-/node-tree-data-0.0.2.tgz"
  },
  "_npmVersion": "1.1.62",
  "_npmUser": {
    "name": "brighthas",
    "email": "brighthas@gmail.com"
  },
  "maintainers": [
    {
      "name": "brighthas",
      "email": "brighthas@gmail.com"
    }
  ],
  "_shasum": "d8daa89a61bb90528d3b55cfbfb6f13f966b3513",
  "_resolved": "https://registry.npmjs.org/node-tree-data/-/node-tree-data-0.0.2.tgz",
  "_from": "node-tree-data@*"
}
