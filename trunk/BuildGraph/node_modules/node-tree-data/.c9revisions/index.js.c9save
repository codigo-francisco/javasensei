{"ts":1373835299146,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = Tree;\r\n\r\nif (typeof window === \"undefined\") {\r\n    var uuid = require(\"node-uuid\").v4;\r\n    var Emitter = require('events').EventEmitter;\r\n} else {\r\n    var uuid = require(\"uuid\");\r\n    var Emitter = require(\"emitter\");\r\n}\r\n\r\nfunction Tree(id) {\r\n    Emitter.call(this);\r\n    if (id) {\r\n        this._id = id;\r\n    } else {\r\n        this._id = uuid();\r\n    }\r\n    this._data = {};\r\n    this._list = [];\r\n}\r\n\r\nTree.prototype = {\r\n\r\n    isRoot: function(nid) {\r\n        return this._list.indexOf(nid) === -1 ? false : true;\r\n    },\r\n\r\n    getNode: function(nodeId) {\r\n        try {\r\n            var v = JSON.parse(JSON.stringify(this._data[nodeId]));\r\n            return v;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n\r\n    },\r\n\r\n    changeNodeLabel: function(label, nodeId) {\r\n\r\n        var node = this._data[nodeId],\r\n            self = this;\r\n        if (node) {            \r\n            node.label = label;\r\n            self.emit(\"change label\", node);\r\n            self.emit(\"change\",node);\r\n        }\r\n    },\r\n\r\n    setNodeData: function(data, nodeId) {\r\n        var node = this._data[nodeId],\r\n            self = this;\r\n        if (node) {\r\n            node.data = JSON.parse(JSON.stringify(data));\r\n            self.emit(\"change data\", node)\r\n            self.emit(\"change\",node);\r\n        }\r\n    },\r\n\r\n    up: function(nodeId) {\r\n\r\n        var node = this._data[nodeId],\r\n            self = this;\r\n\r\n        if (node) {\r\n\r\n            var list = [];\r\n            if (node.parent) {\r\n                var parent = this._data[node.parent];\r\n\r\n                if (parent) {\r\n                    list = parent.list;\r\n                }\r\n            } else {\r\n                list = this._list;\r\n            }\r\n\r\n            var index = list.indexOf(nodeId);\r\n            if (index !== -1 && index !== 0) {\r\n                list.splice(index, 1);\r\n                list.splice(index - 1, 0, nodeId);\r\n                self.emit(\"up\", self.getNode(node.id));\r\n                self.emit(\"change\",node);\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n\r\n    down: function(nodeId) {\r\n        var node = this._data[nodeId],\r\n            self = this;\r\n\r\n        if (node) {\r\n\r\n            var list = [];\r\n            if (node.parent) {\r\n                var parent = this._data[node.parent];\r\n\r\n                if (parent) {\r\n                    list = parent.list;\r\n                }\r\n            } else {\r\n                list = this._list;\r\n            }\r\n\r\n            var index = list.indexOf(nodeId);\r\n            if (index !== -1 && index !== list.length - 1) {\r\n                list.splice(index, 1);\r\n                list.splice(index + 1, 0, nodeId);\r\n                self.emit(\"down\", self.getNode(node.id));\r\n                self.emit(\"change\",node);\r\n\r\n            }\r\n\r\n        }\r\n    },\r\n    getRoute: function(nid) {\r\n        var rs = [nid];\r\n        var self = this;\r\n\r\n        function for_(nodeId) {\r\n            var node = self._data[nodeId];\r\n            if (node && node.parent) {\r\n                rs.unshift(node.parent);\r\n                for_(node.parent);\r\n            }\r\n        }\r\n        for_(nid);\r\n        return rs;\r\n    },\r\n\r\n    top: function(nodeId) {\r\n        var node = this._data[nodeId],\r\n            self = this;\r\n        if (node) {\r\n\r\n            var list = [];\r\n            if (node.parent) {\r\n                var parent = this._data[node.parent];\r\n\r\n                if (parent) {\r\n                    list = parent.list;\r\n                }\r\n            } else {\r\n                list = this._list;\r\n            }\r\n\r\n            var index = list.indexOf(nodeId);\r\n            if (index !== -1) {\r\n                list.splice(index, 1);\r\n                list.splice(0, 0, nodeId);\r\n                self.emit(\"top\", self.getNode(node.id));\r\n                self.emit(\"change\",node);\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    getChilds: function(parentId) {\r\n        var rs = [];\r\n        var self = this;\r\n        var list = this.getChildIds(parentId);\r\n\r\n        for (var i = 0, len = list.length; i < len; i++) {\r\n            rs.push(self.getNode(list[i]));\r\n        }\r\n\r\n        return JSON.parse(JSON.stringify(rs));\r\n\r\n    },\r\n\r\n    getChildIds: function(parentId) {\r\n        var list = [];\r\n        if (parentId) {\r\n            var node = this.getNode(parentId);\r\n            if (node) {\r\n                list = node.list;\r\n            }\r\n        } else {\r\n            list = this._list;\r\n        }\r\n        return JSON.parse(JSON.stringify(list));\r\n    },\r\n\r\n    createNode: function(label, parentId) {\r\n           var self = this;\r\n        var node_data = {}\r\n        if (typeof label === \"string\") {\r\n            node_data.label = label;\r\n        } else {\r\n            node_data = label;\r\n        }\r\n        var node = new TreeNode(node_data);\r\n        this._data[node.id] = node;\r\n        if (parentId) {\r\n            TreeNode.prototype.addChildTag.call(this._data[parentId], node);\r\n        } else {\r\n            this._list.push(node.id);\r\n        }\r\n\r\n        self.emit(\"create\", node);\r\n        return JSON.parse(JSON.stringify(node));\r\n\r\n    },\r\n\r\n    move: function(targetId, nodeId) {\r\n        var self = this;\r\n        if (this._contain(nodeId, targetId)) {} else {\r\n\r\n            var target = this._data[targetId];\r\n            var child = this._data[nodeId];\r\n            var oldParent = this._data[child.parent];\r\n            if (oldParent) {\r\n                TreeNode.prototype.removeChildTag.call(oldParent, child.id)\r\n            } else {\r\n                var position = this._list.indexOf(child.id);\r\n                if (position !== -1)\r\n                    this._list.splice(position, 1);\r\n            }\r\n\r\n            TreeNode.prototype.addChildTag.call(target, child);\r\n            self.emit(\"move\",\r\n            // old parent\r\n            self.getNode(oldParent.id),\r\n            // new parent\r\n            self.getNode(target.id),\r\n            // child\r\n            self.getNode(child.id));\r\n            self.emit(\"change\",oldParent); \r\n\r\n        }\r\n    },\r\n\r\n    _contain: function(parentId, nodeId) {\r\n\r\n        var isContain = false;\r\n        var self = this;\r\n\r\n        function _contain(list) {\r\n            if (!isContain) {\r\n                var position = list.indexOf(nodeId);\r\n                if (position !== -1) {\r\n                    isContain = true;\r\n                } else {\r\n                    list.forEach(function(id) {\r\n                        if (self._data[id]) {\r\n                            _contain(self._data[id].list);\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        var parent = this._data[parentId]\r\n        if (parent) {\r\n            _contain(parent.list);\r\n        }\r\n\r\n        return isContain\r\n    },\r\n\r\n    _allChildIds: function(nodeId) {\r\n        var self = this;\r\n        var ids = [];\r\n\r\n        function re(node) {\r\n            ids = ids.concat(node.list);\r\n            node.list.forEach(function(id) {\r\n                re(self._data[id]);\r\n            })\r\n        }\r\n        re(this._data[nodeId])\r\n\r\n        return ids;\r\n    },\r\n\r\n    remove: function(nodeId) {\r\n\r\n        var self = this;\r\n        var node = this._data[nodeId];\r\n        if (node) {\r\n            var ids = this._allChildIds(node.id);\r\n            ids.forEach(function(id) {\r\n                delete self._data[id];\r\n            })\r\n\r\n            delete self._data[nodeId];\r\n        }\r\n        if (node.parent) {\r\n            TreeNode.prototype.removeChildTag.call(self._data[node.parent], node.id)\r\n            self.emit(\"remove\", node);\r\n        } else {\r\n            var p = self._list.indexOf(nodeId);\r\n            if (p !== -1) {\r\n                self._list.splice(p, 1);\r\n                self.emit(\"remove\", node);\r\n            }\r\n        }\r\n    },\r\n\r\n    getId: function() {\r\n        return this._id;\r\n\r\n    },\r\n\r\n    json: function() {\r\n        var data = {\r\n            id: this._id,\r\n            nodes: this._data,\r\n            rootIds: this._list\r\n        }\r\n        return JSON.parse(JSON.stringify(data));\r\n    },\r\n\r\n    reborn: function(data) {\r\n        try{\r\n            data = JSON.parse(JSON.stringify(data));\r\n            this._id = data.id;\r\n            this._data = data.nodes || {};\r\n            this._list = data.rootIds || [];\r\n            this.emit(\"reborn\")\r\n        }catch(e){\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\n// extends Emitter.prototype\r\nfor (var key in Emitter.prototype) {\r\n    Tree.prototype[key] = Emitter.prototype[key];\r\n}\r\n\r\nTree.json2obj = function(data) {\r\n    data = JSON.parse(JSON.stringify(data));\r\n    var tree = new Tree();\r\n    tree._id = data.id;\r\n    tree._data = data.nodes;\r\n    tree._list = data.rootIds;\r\n    return tree;\r\n}\r\n\r\nfunction TreeNode(data) {\r\n    this.id = data.id || uuid();\r\n    this.label = data.label;\r\n    this.parent = null;\r\n    this.list = [];\r\n    this.data = data.data || {};\r\n}\r\n\r\nTreeNode.prototype = {\r\n\r\n    addChildTag: function(node) {\r\n        node.parent = this.id;\r\n        this.list.push(node.id);\r\n    },\r\n    removeChildTag: function(childId) {\r\n        var position = this.list.indexOf(childId);\r\n        if (position !== -1) {\r\n            this.list.splice(position, 1);\r\n        }\r\n    }\r\n\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":9239}]],"length":9239}
