[
  {
    "tags": [],
    "description": {
      "full": "<p>Tree class</p>",
      "summary": "<p>Tree class</p>",
      "body": ""
    },
    "ignore": false,
    "code": "function Tree(id) {\n    Emitter.call(this);\n    if (id) {\n        this._id = id;\n    } else {\n        this._id = uuid();\n    }\n    this._data = {};\n    this._list = [];\n}\n\nTree.prototype = {",
    "ctx": {
      "type": "function",
      "name": "Tree",
      "string": "Tree()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": "true / false"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>dfdfdfdfdfdfd</p>",
      "summary": "<p>dfdfdfdfdfdfd</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "isRoot: function(nid) {\n        return _.indexOf(this._list, nid) == -1 ? false : true;\n    },\n\n    getNode: function(nodeId) {\n        try {\n            var v = JSON.parse(JSON.stringify(this._data[nodeId]));\n            return v;\n        } catch (e) {\n            return null;\n        }\n\n    },\n\n    changeNodeLabel: function(label, nodeId) {\n        var node = this._data[nodeId],\n            self = this;\n        if (node) {\n            node.label = label;\n            setTimeout(function() {\n                self.emit(\"change\", nodeId);\n                self.emit(\"change label\", nodeId);\n            }, 1);\n        }\n    },\n\n    setNodeData: function(data, nodeId) {\n        var node = this._data[nodeId],\n            self = this;\n        if (node) {\n            node.data = JSON.parse(JSON.stringify(data));\n            setTimeout(function() {\n                self.emit(\"change\", nodeId)\n            }, 1);\n        }\n    },\n\n    up: function(nodeId) {\n\n        var node = this._data[nodeId],\n            self = this;\n\n        if (node) {\n\n            var list = [];\n            if (node.parent) {\n                var parent = this._data[node.parent];\n\n                if (parent) {\n                    list = parent.list;\n                }\n            } else {\n                list = this._list;\n            }\n\n            var index = list.indexOf(nodeId);\n            if (index !== -1 && index !== 0) {\n                list.splice(index, 1);\n                list.splice(index - 1, 0, nodeId);\n                setTimeout(function() {\n                    self.emit(\"change\", node.parent)\n                }, 1);\n            }\n\n        }\n    },\n\n\n    down: function(nodeId) {\n        var node = this._data[nodeId],\n            self = this;\n\n        if (node) {\n\n            var list = [];\n            if (node.parent) {\n                var parent = this._data[node.parent];\n\n                if (parent) {\n                    list = parent.list;\n                }\n            } else {\n                list = this._list;\n            }\n\n            var index = list.indexOf(nodeId);\n            if (index !== -1 && index !== list.length - 1) {\n                list.splice(index, 1);\n                list.splice(index + 1, 0, nodeId);\n                setTimeout(function() {\n                    self.emit(\"change\", node.parent)\n                }, 1);\n            }\n\n        }\n    },\n    getRoute: function(nid) {\n        var rs = [nid];\n        var self = this;\n\n        function for_(nodeId) {\n            var node = self._data[nodeId];\n            if (node && node.parent) {\n                rs.unshift(node.parent);\n                for_(node.parent);\n            }\n        }\n        for_(nid);\n        return rs;\n    },\n\n    top: function(nodeId) {\n        var node = this._data[nodeId],\n            self = this;\n\n        if (node) {\n\n            var list = [];\n            if (node.parent) {\n                var parent = this._data[node.parent];\n\n                if (parent) {\n                    list = parent.list;\n                }\n            } else {\n                list = this._list;\n            }\n\n            var index = list.indexOf(nodeId);\n            if (index !== -1) {\n                list.splice(index, 1);\n                list.splice(0, 0, nodeId);\n                setTimeout(function() {\n                    self.emit(\"change\", node.parent)\n                }, 1);\n            }\n\n        }\n    },\n\n    getChilds: function(parentId) {\n        var rs = [];\n        var self = this;\n        var list = this.getChildIds(parentId);\n\n        for (var i = 0, len = list.length; i < len; i++) {\n            rs.push(self.getNode(list[i]));\n        }\n\n        return JSON.parse(JSON.stringify(rs));\n\n    },\n\n    getChildIds: function(parentId) {\n        var list = [];\n        if (parentId) {\n            var node = this.getNode(parentId);\n            if (node) {\n                list = node.list;\n            }\n        } else {\n            list = this._list;\n        }\n        return JSON.parse(JSON.stringify(list));\n    },\n\n    createNode: function(label, parentId) {\n\n        var self = this;\n        var node_data = {}\n        if (typeof label === \"string\") {\n            node_data.label = label;\n        }else{\n            node_data = label;\n        }\n        var node = new TreeNode(node_data);\n        this._data[node.id] = node;\n        if(parentId) {            \n            TreeNode.prototype.addChildTag.call(this._data[parentId], node);\n        }else{\n            this._list.push(node.id);\n        }\n        setTimeout(function() {\n            self.emit(\"create\", node.id, parentId);\n        }, 1);\n\n\n        return JSON.parse(JSON.stringify(node));\n\n    },\n\n    move: function(targetId, nodeId) {\n        var self = this;\n        if (this._contain(nodeId, targetId)) {} else {\n\n            var target = this._data[targetId];\n            var child = this._data[nodeId];\n            var oldParent = this._data[child.parent];\n            if (oldParent) {\n                TreeNode.prototype.removeChildTag.call(oldParent, child.id)\n            } else {\n                var position = this._list.indexOf(child.id);\n                if (position !== -1)\n                    this._list.splice(position, 1);\n            }\n\n            TreeNode.prototype.addChildTag.call(target, child);\n            setTimeout(function() {\n                self.emit(\"change\", targetId);\n                self.emit(\"change\", oldParent.id);\n                self.emit(\"change\", nodeId);\n            }, 1);\n        }\n    },\n\n    _contain: function(parentId, nodeId) {\n\n        var isContain = false;\n        var self = this;\n\n        function _contain(list) {\n            if (!isContain) {\n                var position = list.indexOf(nodeId);\n                if (position !== -1) {\n                    isContain = true;\n                } else {\n                    list.forEach(function(id) {\n                        if (self._data[id]) {\n                            _contain(self._data[id].list);\n                        }\n                    })\n                }\n            }\n        }\n\n        var parent = this._data[parentId]\n        if (parent) {\n            _contain(parent.list);\n        }\n\n        return isContain\n    },\n\n    _allChildIds: function(nodeId) {\n        var self = this;\n        var ids = [];\n\n        function re(node) {\n            ids = ids.concat(node.list);\n            node.list.forEach(function(id) {\n                re(self._data[id]);\n            })\n        }\n        re(this._data[nodeId])\n\n        return ids;\n    },\n\n    remove: function(nodeId) {\n\n        var self = this;\n        var node = this._data[nodeId];\n        if (node) {\n            var ids = this._allChildIds(node.id);\n            ids.forEach(function(id) {\n                delete self._data[id];\n            })\n\n            delete self._data[nodeId];\n        }\n        if (node.parent) {\n            TreeNode.prototype.removeChildTag.call(self._data[node.parent], node.id)\n            setTimeout(function() {\n                self.emit(\"change\", node.parent);\n                self.emit(\"remove\", nodeId);\n            }, 1);\n        } else {\n            var p = self._list.indexOf(nodeId);\n            if (p !== -1) {\n                self._list.splice(p, 1);\n                setTimeout(function() {\n                    self.emit(\"remove\", nodeId);\n                }, 1);\n            }\n        }\n    },\n\n    getId: function() {\n        return this._id;\n\n    },\n\n    json: function() {\n        var data = {\n            id: this.id,\n            nodes: this._data,\n            rootIds: this._list\n        }\n        return JSON.parse(JSON.stringify(data));\n    },\n\n    reborn: function(data) {\n\n        data = JSON.parse(JSON.stringify(data));\n        this._id = data.id;\n        this._data = data.nodes || {};\n        this._list = data.rootIds || [];\n        this.emit(\"reborn\")\n    }\n\n}\n\n// extends Emitter.prototype\nfor (var key in Emitter.prototype) {\n    Tree.prototype[key] = Emitter.prototype[key];\n}\n\n\n\nTree.json2obj = function(data) {\n    data = JSON.parse(JSON.stringify(data));\n    var tree = new Tree();\n    tree._id = data.id;\n    tree._data = data.nodes;\n    tree._list = data.rootIds;\n    return tree;\n}\n\nfunction TreeNode(data) {\n    this.id = data.id || uuid();\n    this.label = data.label;\n    this.parent = null;\n    this.list = [];\n    this.data = data.data || {};\n}\n\nTreeNode.prototype = {\n\n    addChildTag: function(node) {\n        node.parent = this.id;\n        this.list.push(node.id);\n    },\n    removeChildTag: function(childId) {\n        var position = this.list.indexOf(childId);\n        if (position !== -1) {\n            this.list.splice(position, 1);\n        }\n    }\n\n}"
  }
]