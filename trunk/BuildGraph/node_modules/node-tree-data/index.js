module.exports = Tree;

if (typeof window === "undefined") {
    var uuid = require("node-uuid").v4;
    var Emitter = require('events').EventEmitter;
} else {
    var uuid = require("uuid");
    var Emitter = require("emitter");
}

function Tree(id) {
    Emitter.call(this);
    if (id) {
        this._id = id;
    } else {
        this._id = uuid();
    }
    this._data = {};
    this._list = [];
}

Tree.prototype = {

    isRoot: function(nid) {
        return this._list.indexOf(nid) === -1 ? false : true;
    },

    getNode: function(nodeId) {
        try {
            var v = JSON.parse(JSON.stringify(this._data[nodeId]));
            return v;
        } catch (e) {
            return null;
        }

    },

    changeNodeLabel: function(label, nodeId) {

        var node = this._data[nodeId],
            self = this;
        if (node) {            
            node.label = label;
            self.emit("change label", node);
            self.emit("change",node);
        }
    },

    setNodeData: function(data, nodeId) {
        var node = this._data[nodeId],
            self = this;
        if (node) {
            node.data = JSON.parse(JSON.stringify(data));
            self.emit("change data", node)
            self.emit("change",node);
        }
    },

    up: function(nodeId) {

        var node = this._data[nodeId],
            self = this;

        if (node) {

            var list = [];
            if (node.parent) {
                var parent = this._data[node.parent];

                if (parent) {
                    list = parent.list;
                }
            } else {
                list = this._list;
            }

            var index = list.indexOf(nodeId);
            if (index !== -1 && index !== 0) {
                list.splice(index, 1);
                list.splice(index - 1, 0, nodeId);
                self.emit("up", self.getNode(node.id));
                self.emit("change",node);
            }

        }
    },


    down: function(nodeId) {
        var node = this._data[nodeId],
            self = this;

        if (node) {

            var list = [];
            if (node.parent) {
                var parent = this._data[node.parent];

                if (parent) {
                    list = parent.list;
                }
            } else {
                list = this._list;
            }

            var index = list.indexOf(nodeId);
            if (index !== -1 && index !== list.length - 1) {
                list.splice(index, 1);
                list.splice(index + 1, 0, nodeId);
                self.emit("down", self.getNode(node.id));
                self.emit("change",node);

            }

        }
    },
    getRoute: function(nid) {
        var rs = [nid];
        var self = this;

        function for_(nodeId) {
            var node = self._data[nodeId];
            if (node && node.parent) {
                rs.unshift(node.parent);
                for_(node.parent);
            }
        }
        for_(nid);
        return rs;
    },

    top: function(nodeId) {
        var node = this._data[nodeId],
            self = this;
        if (node) {

            var list = [];
            if (node.parent) {
                var parent = this._data[node.parent];

                if (parent) {
                    list = parent.list;
                }
            } else {
                list = this._list;
            }

            var index = list.indexOf(nodeId);
            if (index !== -1) {
                list.splice(index, 1);
                list.splice(0, 0, nodeId);
                self.emit("top", self.getNode(node.id));
                self.emit("change",node);
            }

        }
    },

    getChilds: function(parentId) {
        var rs = [];
        var self = this;
        var list = this.getChildIds(parentId);

        for (var i = 0, len = list.length; i < len; i++) {
            rs.push(self.getNode(list[i]));
        }

        return JSON.parse(JSON.stringify(rs));

    },

    getChildIds: function(parentId) {
        var list = [];
        if (parentId) {
            var node = this.getNode(parentId);
            if (node) {
                list = node.list;
            }
        } else {
            list = this._list;
        }
        return JSON.parse(JSON.stringify(list));
    },

    createNode: function(label, parentId) {
           var self = this;
        var node_data = {}
        if (typeof label === "string") {
            node_data.label = label;
        } else {
            node_data = label;
        }
        var node = new TreeNode(node_data);
        this._data[node.id] = node;
        if (parentId) {
            TreeNode.prototype.addChildTag.call(this._data[parentId], node);
        } else {
            this._list.push(node.id);
        }

        self.emit("create", node);
        return JSON.parse(JSON.stringify(node));

    },

    move: function(targetId, nodeId) {
        var self = this;
        if (this._contain(nodeId, targetId)) {} else {

            var target = this._data[targetId];
            var child = this._data[nodeId];
            var oldParent = this._data[child.parent];
            if (oldParent) {
                TreeNode.prototype.removeChildTag.call(oldParent, child.id)
            } else {
                var position = this._list.indexOf(child.id);
                if (position !== -1)
                    this._list.splice(position, 1);
            }

            TreeNode.prototype.addChildTag.call(target, child);
            self.emit("move",
            // old parent
            self.getNode(oldParent.id),
            // new parent
            self.getNode(target.id),
            // child
            self.getNode(child.id));
            self.emit("change",oldParent); 

        }
    },

    _contain: function(parentId, nodeId) {

        var isContain = false;
        var self = this;

        function _contain(list) {
            if (!isContain) {
                var position = list.indexOf(nodeId);
                if (position !== -1) {
                    isContain = true;
                } else {
                    list.forEach(function(id) {
                        if (self._data[id]) {
                            _contain(self._data[id].list);
                        }
                    })
                }
            }
        }

        var parent = this._data[parentId]
        if (parent) {
            _contain(parent.list);
        }

        return isContain
    },

    _allChildIds: function(nodeId) {
        var self = this;
        var ids = [];

        function re(node) {
            ids = ids.concat(node.list);
            node.list.forEach(function(id) {
                re(self._data[id]);
            })
        }
        re(this._data[nodeId])

        return ids;
    },

    remove: function(nodeId) {

        var self = this;
        var node = this._data[nodeId];
        if (node) {
            var ids = this._allChildIds(node.id);
            ids.forEach(function(id) {
                delete self._data[id];
            })

            delete self._data[nodeId];
        }
        if (node.parent) {
            TreeNode.prototype.removeChildTag.call(self._data[node.parent], node.id)
            self.emit("remove", node);
        } else {
            var p = self._list.indexOf(nodeId);
            if (p !== -1) {
                self._list.splice(p, 1);
                self.emit("remove", node);
            }
        }
    },

    getId: function() {
        return this._id;

    },

    json: function() {
        var data = {
            id: this._id,
            nodes: this._data,
            rootIds: this._list
        }
        return JSON.parse(JSON.stringify(data));
    },

    reborn: function(data) {
        try{
            data = JSON.parse(JSON.stringify(data));
            this._id = data.id;
            this._data = data.nodes || {};
            this._list = data.rootIds || [];
            this.emit("reborn")
        }catch(e){
            
        }
    }

}

// extends Emitter.prototype
for (var key in Emitter.prototype) {
    Tree.prototype[key] = Emitter.prototype[key];
}

Tree.json2obj = function(data) {
    data = JSON.parse(JSON.stringify(data));
    var tree = new Tree();
    tree._id = data.id;
    tree._data = data.nodes;
    tree._list = data.rootIds;
    return tree;
}

function TreeNode(data) {
    this.id = data.id || uuid();
    this.label = data.label;
    this.parent = null;
    this.list = [];
    this.data = data.data || {};
}

TreeNode.prototype = {

    addChildTag: function(node) {
        node.parent = this.id;
        this.list.push(node.id);
    },
    removeChildTag: function(childId) {
        var position = this.list.indexOf(childId);
        if (position !== -1) {
            this.list.splice(position, 1);
        }
    }

}